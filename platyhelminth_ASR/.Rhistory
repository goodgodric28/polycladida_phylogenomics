# Log likelihood test
log.lik.test.ER <- data.frame(fitcorER$states)
log.lik.test.ER$stat <- abs(log(log.lik.test.ER$X0)-log(log.lik.test.ER$X1))
log.lik.test.ER$test <- log.lik.test.ER$stat >= 2
# Log likelihood test
log.lik.test.ER <- data.frame(fitcorER$states)
log.lik.test.ER$stat <- abs(log(log.lik.test.ER$X0)-log(log.lik.test.ER$X1))
log.lik.test.ER
# corHMM runs
fitcorER <- rayDISC(tree, lh_data2, model="ER", node.states="marginal",state.recon="subsequently")
fitcorER
lh_data2
lh_data2 <- data.frame(lh_data2)
# corHMM runs
fitcorER <- rayDISC(tree, lh_data2, model="ER", node.states="marginal",state.recon="subsequently")
fitcorARD <- rayDISC(tree, lh_data2, model="ARD", node.states="marginal",state.recon="subsequently")
fitcorER
lh_data2
lh_data2 <- lh_data2[order(datamatch)]
lh_data2 <- lh_data2$gsub.2...0.1...lh_data.devel.code.
lh_data2 <- setNames(lh_data2, lh_data$SPECIES.REPRESENTATIVE)
datamatch <- match(names(lh_data2),ultratree$tip.label)
lh_data2 <- lh_data2[order(datamatch)]
lh_data2 <- data.frame(lh_data2)
# Change any spaces into underscores for species names, then generate a vector with
# the appropriate feeding data where the names are set to the species names
lh_data$SPECIES.REPRESENTATIVE<-gsub(" ","_",x=lh_data$SPECIES.REPRESENTATIVE)
lh_data2 <- data.frame(lh_data$SPECIES.REPRESENTATIVE,gsub(2,"0&1",lh_data$devel.code))
lh_data2 <- lh_data2$gsub.2...0.1...lh_data.devel.code.
lh_data2 <- setNames(lh_data2, lh_data$SPECIES.REPRESENTATIVE)
datamatch <- match(names(lh_data2),ultratree$tip.label)
lh_data2 <- lh_data2[order(datamatch)]
lh_data2 <- data.frame(lh_data2)
# corHMM runs
fitcorER <- rayDISC(tree, lh_data2, model="ER", node.states="marginal",state.recon="subsequently")
lh_data2
names(lh_data2) <- NULL
# corHMM runs
fitcorER <- rayDISC(tree, lh_data2, model="ER", node.states="marginal",state.recon="subsequently")
fitcorARD <- rayDISC(tree, lh_data2, model="ARD", node.states="marginal",state.recon="subsequently")
fitcorER
lh_data$SPECIES.REPRESENTATIVE<-gsub(" ","_",x=lh_data$SPECIES.REPRESENTATIVE)
lh_data2 <- data.frame(lh_data$SPECIES.REPRESENTATIVE,gsub(2,"0&1",lh_data$devel.code))
lh_data2 <- lh_data2$gsub.2...0.1...lh_data.devel.code.
lh_data2 <- setNames(lh_data2, lh_data$SPECIES.REPRESENTATIVE)
datamatch <- match(names(lh_data2),ultratree$tip.label)
lh_data2 <- lh_data2[order(datamatch)]
lh_data2 <- data.frame(names(lh_data2),lh_data2)
lh_data2$lh_data2 <-gsub("0&1*","0/1",tree$tip.label)
lh_data2$lh_data2 <-gsub("0&1*","0/1",lh_data2$lh_data2)
# corHMM runs
fitcorER <- rayDISC(tree, lh_data2, model="ER", node.states="marginal",state.recon="subsequently")
fitcorARD <- rayDISC(tree, lh_data2, model="ARD", node.states="marginal",state.recon="subsequently")
fitcorER
lh_data2
lh_data$SPECIES.REPRESENTATIVE<-gsub(" ","_",x=lh_data$SPECIES.REPRESENTATIVE)
lh_data2 <- data.frame(lh_data$SPECIES.REPRESENTATIVE,gsub(2,"0&1",lh_data$devel.code))
lh_data2 <- lh_data2$gsub.2...0.1...lh_data.devel.code.
lh_data2 <- setNames(lh_data2, lh_data$SPECIES.REPRESENTATIVE)
datamatch <- match(names(lh_data2),ultratree$tip.label)
lh_data2 <- lh_data2[order(datamatch)]
lh_data2 <- data.frame(names(lh_data2),lh_data2)
?rayDISC
lh_data2 <- data.frame(names(lh_data2),as.string(lh_data2))
lh_data2 <- data.frame(names(lh_data2),as.character(lh_data2))
# corHMM runs
fitcorER <- rayDISC(tree, lh_data2, model="ER", node.states="marginal",state.recon="subsequently")
fitcorARD <- rayDISC(tree, lh_data2, model="ARD", node.states="marginal",state.recon="subsequently")
fitcorARD
lh_data2 <- lh_data2[order(datamatch)]
lh_data$SPECIES.REPRESENTATIVE<-gsub(" ","_",x=lh_data$SPECIES.REPRESENTATIVE)
lh_data2 <- data.frame(lh_data$SPECIES.REPRESENTATIVE,gsub(2,"0&1",lh_data$devel.code))
lh_data2 <- lh_data2$gsub.2...0.1...lh_data.devel.code.
lh_data2 <- setNames(lh_data2, lh_data$SPECIES.REPRESENTATIVE)
datamatch <- match(names(lh_data2),ultratree$tip.label)
lh_data2 <- lh_data2[order(datamatch)]
lh_data2 <- data.frame(names(lh_data2),lh_data2)
lh_data2$lh_data2
lh_data2 <- data.frame(names(lh_data2),lh_data2, stringsAsFactors=FALSE)
lh_data$SPECIES.REPRESENTATIVE<-gsub(" ","_",x=lh_data$SPECIES.REPRESENTATIVE)
lh_data2 <- data.frame(lh_data$SPECIES.REPRESENTATIVE,gsub(2,"0&1",lh_data$devel.code))
lh_data2 <- lh_data2$gsub.2...0.1...lh_data.devel.code.
lh_data2 <- setNames(lh_data2, lh_data$SPECIES.REPRESENTATIVE)
datamatch <- match(names(lh_data2),ultratree$tip.label)
lh_data2 <- lh_data2[order(datamatch)]
lh_data2 <- data.frame(names(lh_data2),lh_data2, stringsAsFactors=FALSE)
# corHMM runs
fitcorER <- rayDISC(tree, lh_data2, model="ER", node.states="marginal",state.recon="subsequently")
fitcorARD <- rayDISC(tree, lh_data2, model="ARD", node.states="marginal",state.recon="subsequently")
fitcorER
lh_data2$lh_data2
lh_data$SPECIES.REPRESENTATIVE<-gsub(" ","_",x=lh_data$SPECIES.REPRESENTATIVE)
lh_data2 <- data.frame(lh_data$SPECIES.REPRESENTATIVE,gsub(2,"0&1",lh_data$devel.code))
lh_data2 <- lh_data2$gsub.2...0.1...lh_data.devel.code.
lh_data2 <- setNames(lh_data2, lh_data$SPECIES.REPRESENTATIVE)
datamatch <- match(names(lh_data2),ultratree$tip.label)
lh_data2 <- lh_data2[order(datamatch)]
lh_data2 <- data.frame(names(lh_data2),lapply(lh_data2, as.character))
lh_data2$lh_data2
# the appropriate feeding data where the names are set to the species names
lh_data$SPECIES.REPRESENTATIVE<-gsub(" ","_",x=lh_data$SPECIES.REPRESENTATIVE)
lh_data2 <- data.frame(lh_data$SPECIES.REPRESENTATIVE,gsub(2,"0&1",lh_data$devel.code))
lh_data2 <- lh_data2$gsub.2...0.1...lh_data.devel.code.
lh_data2 <- setNames(lh_data2, lh_data$SPECIES.REPRESENTATIVE)
datamatch <- match(names(lh_data2),ultratree$tip.label)
lh_data2 <- lh_data2[order(datamatch)]
lh_data2 <- data.frame(names(lh_data2),as.character(lh_data2))
lh_data2$lh_data2
lh_data$SPECIES.REPRESENTATIVE<-gsub(" ","_",x=lh_data$SPECIES.REPRESENTATIVE)
lh_data2 <- data.frame(lh_data$SPECIES.REPRESENTATIVE,gsub(2,"0&1",lh_data$devel.code))
lh_data2 <- lh_data2$gsub.2...0.1...lh_data.devel.code.
lh_data2 <- setNames(lh_data2, lh_data$SPECIES.REPRESENTATIVE)
datamatch <- match(names(lh_data2),ultratree$tip.label)
lh_data2 <- lh_data2[order(datamatch)]
lh_data2
lh_data2 <- as.character(lh_data2)
lh_data2
lh_data2 <- data.frame(names(lh_data2),lh_data2)
lh_data$SPECIES.REPRESENTATIVE<-gsub(" ","_",x=lh_data$SPECIES.REPRESENTATIVE)
lh_data2 <- data.frame(lh_data$SPECIES.REPRESENTATIVE,gsub(2,"0&1",lh_data$devel.code))
lh_data2 <- lh_data2$gsub.2...0.1...lh_data.devel.code.
lh_data2 <- setNames(lh_data2, lh_data$SPECIES.REPRESENTATIVE)
datamatch <- match(names(lh_data2),ultratree$tip.label)
lh_data2 <- lh_data2[order(datamatch)]
lh_data_text <- as.character(lh_data2)
lh_data2 <- data.frame(names(lh_data2),lh_data_text)
lh_data2$lh_data2
lh_data_text
names(lh_data2)
# Pull the data matrix of interest into R
lh_data <- read.csv("../life_history_traits_full.csv",stringsAsFactors=FALSE)
# Change any spaces into underscores for species names, then generate a vector with
# the appropriate feeding data where the names are set to the species names
lh_data$SPECIES.REPRESENTATIVE<-gsub(" ","_",x=lh_data$SPECIES.REPRESENTATIVE)
lh_data2 <- data.frame(lh_data$SPECIES.REPRESENTATIVE,gsub(2,"0&1",lh_data$devel.code))
lh_data2 <- lh_data2$gsub.2...0.1...lh_data.devel.code.
lh_data2 <- setNames(lh_data2, lh_data$SPECIES.REPRESENTATIVE)
datamatch <- match(names(lh_data2),ultratree$tip.label)
lh_data2 <- lh_data2[order(datamatch)]
lh_data_text <- as.character(lh_data2)
lh_data_text
lh_data2
lh_data2 <- data.frame(names(lh_data2),lh_data_text)
lh_data2$lh_data2
lh_data <- read.csv("../life_history_traits_full.csv",stringsAsFactors=FALSE)
# Change any spaces into underscores for species names, then generate a vector with
# the appropriate feeding data where the names are set to the species names
lh_data$SPECIES.REPRESENTATIVE<-gsub(" ","_",x=lh_data$SPECIES.REPRESENTATIVE)
lh_data2 <- data.frame(lh_data$SPECIES.REPRESENTATIVE,gsub(2,"0&1",lh_data$devel.code))
lh_data2 <- lh_data2$gsub.2...0.1...lh_data.devel.code.
lh_data2 <- setNames(lh_data2, lh_data$SPECIES.REPRESENTATIVE)
datamatch <- match(names(lh_data2),ultratree$tip.label)
lh_data2 <- lh_data2[order(datamatch)]
lh_data_text <- as.character(lh_data2)
lh_data3 <- data.frame(names(lh_data2),lh_data_text)
lh_data3
lh_data3$lh_data_text
lh_data3 <- data.frame(names(lh_data2),as.character(lh_data2))
lh_data3$lh_data_text
# Pull the data matrix of interest into R
lh_data <- read.csv("../life_history_traits_full.csv",stringsAsFactors=FALSE)
# Change any spaces into underscores for species names, then generate a vector with
# the appropriate feeding data where the names are set to the species names
lh_data$SPECIES.REPRESENTATIVE<-gsub(" ","_",x=lh_data$SPECIES.REPRESENTATIVE)
lh_data2 <- data.frame(lh_data$SPECIES.REPRESENTATIVE,gsub(2,"0&1",lh_data$devel.code))
lh_data2 <- lh_data2$gsub.2...0.1...lh_data.devel.code.
lh_data2 <- setNames(lh_data2, lh_data$SPECIES.REPRESENTATIVE)
datamatch <- match(names(lh_data2),ultratree$tip.label)
lh_data2 <- lh_data2[order(datamatch)]
lh_data3 <- data.frame(names(lh_data2),as.character(lh_data2))
lh_data3$lh_data_text
lh_data3
lh_data3$l
lh_data3$as.character.lh_data2.
lh_data3 <- data.frame(names(lh_data2),lh_data2)
lh_data3$lh_data2 <- as.character(lh_data3$lh_data2)
lh_data3$lh_data2
# corHMM runs
fitcorER <- rayDISC(tree, lh_data2, model="ER", node.states="marginal",state.recon="subsequently")
# corHMM runs
fitcorER <- rayDISC(tree, lh_data3, model="ER", node.states="marginal",state.recon="subsequently")
fitcorARD <- rayDISC(tree, lh_data3, model="ARD", node.states="marginal",state.recon="subsequently")
fitcorER
fitcorARD
tree
tree$tip.label<-gsub("_.*","",tree$tip.label)
length(tree$tip.label)
length(lh_data3$lh_data2)
lh_data2 <- lh_data2[order(datamatch)]
lh_data2
length(lh_data2)
lh_data2
# Pull the data matrix of interest into R
lh_data <- read.csv("../life_history_traits_full.csv",stringsAsFactors=FALSE)
# Change any spaces into underscores for species names, then generate a vector with
# the appropriate feeding data where the names are set to the species names
lh_data$SPECIES.REPRESENTATIVE<-gsub(" ","_",x=lh_data$SPECIES.REPRESENTATIVE)
lh_data2 <- data.frame(lh_data$SPECIES.REPRESENTATIVE,gsub(2,"0&1",lh_data$devel.code))
lh_data2 <- lh_data2$gsub.2...0.1...lh_data.devel.code.
lh_data2 <- setNames(lh_data2, lh_data$SPECIES.REPRESENTATIVE)
datamatch <- match(names(lh_data2),ultratree$tip.label)
lh_data2 <- lh_data2[order(datamatch)]
lh_data3 <- data.frame(names(lh_data2),lh_data2)
lh_data3$lh_data2 <- as.character(lh_data3$lh_data2)
# corHMM runs
fitcorER <- rayDISC(tree, lh_data3, model="ER", node.states="marginal",state.recon="subsequently")
fitcorARD <- rayDISC(tree, lh_data3, model="ARD", node.states="marginal",state.recon="subsequently")
fitcorER
fitcorARD
log.lik.test.ER <- data.frame(fitcorER$states)
log.lik.test.ER$stat <- abs(log(log.lik.test.ER$X0)-log(log.lik.test.ER$X1))
log.lik.test.ER$test <- log.lik.test.ER$stat >= 2
log.lik.test.ER$test <- gsub(TRUE,"*",log.lik.test.ER$test)
log.lik.test.ER$test <- gsub(FALSE,"",log.lik.test.ER$test)
# Set the colors for each set of labels for plotting
cols <- lh_data$devel.color
cols <- setNames(cols, lh_data$SPECIES.REPRESENTATIVE)
colors <- c("chocolate1","darkslategray3")
# Reordering the vector with the tip colors to match the taxon order in the tree
colsmatch <- match(names(cols),ultratree$tip.label)
cols2 <- cols[order(colsmatch)]
# Phylogeny plot full
setEPS()
postscript("ASR_ER_polyclad.eps")
plot.phylo(ultratree, label.offset=0.02, edge.width=2.5, cex=0.8)
tiplabels(pch=22, bg=cols2,cex=1.5)
nodelabels(pie=fitcorER$states,piecol=colors,cex=0.5)
nodelabels(log.lik.test.ER$test, col="purple", bg=NA,frame="none", adj=c(1.7,-0.1), cex=1.2)
dev.off()
plot.phylo(ultratree, label.offset=0.02, edge.width=2.5, cex=0.8)
tiplabels(pch=22, bg=cols2,cex=1.5)
nodelabels(pie=fitcorER$states,piecol=colors,cex=0.5)
nodelabels(log.lik.test.ER$test, col="purple", bg=NA,frame="none", adj=c(1.7,-0.1), cex=1.2)
# Reordering the vector with the tip colors to match the taxon order in the tree
colsmatch <- match(names(gsub("_.*","",cols)),ultratree$tip.label)
cols2 <- cols[order(colsmatch)]
plot.phylo(ultratree, label.offset=0.02, edge.width=2.5, cex=0.8)
tiplabels(pch=22, bg=cols2,cex=1.5)
nodelabels(pie=fitcorER$states,piecol=colors,cex=0.5)
nodelabels(log.lik.test.ER$test, col="purple", bg=NA,frame="none", adj=c(1.7,-0.1), cex=1.2)
# Set the colors for each set of labels for plotting
cols <- lh_data$devel.color
cols <- setNames(cols, gsub("_.*","",lh_data$SPECIES.REPRESENTATIVE))
colors <- c("chocolate1","darkslategray3")
# Reordering the vector with the tip colors to match the taxon order in the tree
colsmatch <- match(names(cols),ultratree$tip.label)
cols2 <- cols[order(colsmatch)]
plot.phylo(ultratree, label.offset=0.02, edge.width=2.5, cex=0.8)
tiplabels(pch=22, bg=cols2,cex=1.5)
nodelabels(pie=fitcorER$states,piecol=colors,cex=0.5)
nodelabels(log.lik.test.ER$test, col="purple", bg=NA,frame="none", adj=c(1.7,-0.1), cex=1.2)
# Set the colors for each set of labels for plotting
cols <- lh_data$devel.color
cols
cols <- setNames(cols, gsub("_.*","",lh_data$SPECIES.REPRESENTATIVE))
cols
# Change any spaces into underscores for species names, then generate a vector with
# the appropriate feeding data where the names are set to the species names
lh_data$SPECIES.REPRESENTATIVE<-gsub(" ","_",x=lh_data$SPECIES.REPRESENTATIVE)
lh_data2 <- data.frame(lh_data$SPECIES.REPRESENTATIVE,gsub(2,"0&1",lh_data$devel.code))
lh_data2 <- lh_data2$gsub.2...0.1...lh_data.devel.code.
lh_data2 <- setNames(lh_data2, lh_data$SPECIES.REPRESENTATIVE)
datamatch <- match(names(lh_data2),ultratree$tip.label)
lh_data2 <- lh_data2[order(datamatch)]
lh_data3 <- data.frame(names(lh_data2),lh_data2)
lh_data3$lh_data2 <- as.character(lh_data3$lh_data2)
# Set the colors for each set of labels for plotting
cols <- lh_data$devel.color
cols
cols <- setNames(cols, gsub("_.*","",lh_data$SPECIES.REPRESENTATIVE))
cols
# Pull the data matrix of interest into R
lh_data <- read.csv("../life_history_traits_full.csv",stringsAsFactors=FALSE)
lh_data
lh_data$SPECIES.REPRESENTATIVE
lh_data <- read.csv("../life_history_traits_full.csv",stringsAsFactors=FALSE)
# Change any spaces into underscores for species names, then generate a vector with
# the appropriate feeding data where the names are set to the species names
lh_data$SPECIES.REPRESENTATIVE<-gsub(" ","_",x=lh_data$SPECIES.REPRESENTATIVE)
lh_data2 <- data.frame(lh_data$SPECIES.REPRESENTATIVE,gsub(2,"0&1",lh_data$devel.code))
lh_data2 <- lh_data2$gsub.2...0.1...lh_data.devel.code.
lh_data2 <- setNames(lh_data2, lh_data$SPECIES.REPRESENTATIVE)
datamatch <- match(names(lh_data2),ultratree$tip.label)
lh_data2 <- lh_data2[order(datamatch)]
lh_data3 <- data.frame(names(lh_data2),lh_data2)
lh_data3$lh_data2 <- as.character(lh_data3$lh_data2)
# corHMM runs
fitcorER <- rayDISC(tree, lh_data3, model="ER", node.states="marginal",state.recon="subsequently")
fitcorARD <- rayDISC(tree, lh_data3, model="ARD", node.states="marginal",state.recon="subsequently")
fitcorER
fitcorARD
log.lik.test.ER <- data.frame(fitcorER$states)
log.lik.test.ER$stat <- abs(log(log.lik.test.ER$X0)-log(log.lik.test.ER$X1))
log.lik.test.ER$test <- log.lik.test.ER$stat >= 2
log.lik.test.ER$test <- gsub(TRUE,"*",log.lik.test.ER$test)
log.lik.test.ER$test <- gsub(FALSE,"",log.lik.test.ER$test)
cols <- lh_data$devel.color
cols <- setNames(cols, gsub("_.*","",lh_data$SPECIES.REPRESENTATIVE))
colors <- c("chocolate1","darkslategray3")
# Reordering the vector with the tip colors to match the taxon order in the tree
colsmatch <- match(names(cols),ultratree$tip.label)
cols2 <- cols[order(colsmatch)]
# Phylogeny plot full
setEPS()
postscript("ASR_ER_polyclad.eps")
plot.phylo(ultratree, label.offset=0.02, edge.width=2.5, cex=0.8)
tiplabels(pch=22, bg=cols2,cex=1.5)
nodelabels(pie=fitcorER$states,piecol=colors,cex=0.5)
nodelabels(log.lik.test.ER$test, col="purple", bg=NA,frame="none", adj=c(1.7,-0.1), cex=1.2)
dev.off()
plot.phylo(ultratree, label.offset=0.02, edge.width=2.5, cex=0.8)
tiplabels(pch=22, bg=cols2,cex=1.5)
nodelabels(pie=fitcorER$states,piecol=colors,cex=0.5)
nodelabels(log.lik.test.ER$test, col="purple", bg=NA,frame="none", adj=c(1.7,-0.1), cex=1.2)
cols <- setNames(cols, gsub("_.*","",lh_data$SPECIES.REPRESENTATIVE))
cols
cols2
ultratree
# Assign correct tree topology to the variable tree
tree <- read.tree("../../figures/dryad/partitioned_ML/polyclad_37_4469_part_besttree_w_500BS_taxfixed.tre")
# Here I am dropping all outgroup tips to only keep the ingroup taxa
tree <- drop.tip(tree, "Armatoplana_leptalea_B")
tree <- drop.tip(tree, "Prostheceraeus_vittatus")
tree <- drop.tip(tree, "Prosthiostomum_siphunculus")
tree <- drop.tip(tree, "Prorhynchus_sp_I")
tree <- drop.tip(tree, "Notocomplana_lapunda")
# Removing species names to leave only genus
tree$tip.label<-gsub("_.*","",tree$tip.label)
# To view tree
plot.phylo(tree)
# Create an ultrametric tree with correlated model, output of chronos
# needed to be rewritten using read.tree, then test for ultrametricity
chronotree <- chronos(tree, lambda=1, model = "correlated")
ultratree <- read.tree(text=write.tree(chronotree))
is.ultrametric(ultratree)
plot.phylo(ultratree, label.offset=0.02, edge.width=2.5, cex=0.8)
tiplabels(pch=22, bg=cols2,cex=1.5)
nodelabels(pie=fitcorER$states,piecol=colors,cex=0.5)
nodelabels(log.lik.test.ER$test, col="purple", bg=NA,frame="none", adj=c(1.7,-0.1), cex=1.2)
# Reordering the vector with the tip colors to match the taxon order in the tree
colsmatch <- match(names(cols),ultratree$tip.label)
cols2 <- cols[order(colsmatch)]
plot.phylo(ultratree, label.offset=0.02, edge.width=2.5, cex=0.8)
tiplabels(pch=22, bg=cols2,cex=1.5)
nodelabels(pie=fitcorER$states,piecol=colors,cex=0.5)
nodelabels(log.lik.test.ER$test, col="purple", bg=NA,frame="none", adj=c(1.7,-0.1), cex=1.2)
plot.phylo(ultratree, label.offset=0.04, edge.width=2.5, cex=0.8)
tiplabels(pch=22, bg=cols2,cex=1.5)
nodelabels(pie=fitcorER$states,piecol=colors,cex=0.5)
nodelabels(log.lik.test.ER$test, col="purple", bg=NA,frame="none", adj=c(1.7,-0.1), cex=1.2)
# Pull the data matrix of interest into R
lh_data <- read.csv("../life_history_traits_full.csv",stringsAsFactors=FALSE)
cols <- lh_data$devel.color
cols <- setNames(cols, gsub("_.*","",lh_data$SPECIES.REPRESENTATIVE))
#colors <- c("chocolate1","darkslategray3")
# Reordering the vector with the tip colors to match the taxon order in the tree
colsmatch <- match(names(cols),ultratree$tip.label)
cols2 <- cols[order(colsmatch)]
# Phylogeny plot full
setEPS()
postscript("ASR_ER_polyclad.eps")
plot.phylo(ultratree, label.offset=0.04, edge.width=2.5, cex=0.8)
tiplabels(pch=22, bg=cols2,cex=1.5)
nodelabels(pie=fitcorER$states,piecol=colors,cex=0.5)
nodelabels(log.lik.test.ER$test, col="purple", bg=NA,frame="none", adj=c(1.7,-0.1), cex=1.2)
dev.off()
plot.phylo(ultratree, label.offset=0.04, edge.width=2.5, cex=0.8)
tiplabels(pch=22, bg=cols2,cex=1.5)
nodelabels(pie=fitcorER$states,piecol=colors,cex=0.5)
nodelabels(log.lik.test.ER$test, col="purple", bg=NA,frame="none", adj=c(1.7,-0.1), cex=1.2)
# Scaled likelihood data set
scaled_likelihoods <- data.frame(fitcorER$states)
colnames(scaled_likelihoods) <- c("Indirect","Direct")
# Write the data set to a .csv file to be edited in excel
write.csv(scaled_likelihoods,"scaled_likelihoods.csv")
scaled_likelihoods
lh_data$devel.color
# Assign correct tree topology to the variable tree
tree <- read.tree("platyhelminths_relabeled.tre")
########################################
# Ancestral state reconstruction
########################################
# Pull the data matrix of interest into R
lh_data <- read.csv("life_history_traits.csv",stringsAsFactors=FALSE)
lh_data2 <- data.frame(lh_data$taxon,lh_data$devel.code)
# corHMM runs
fitcorER <- rayDISC(tree, lh_data2, model="ER", node.states="marginal",state.recon="subsequently")
fitcorARD <- rayDISC(tree, lh_data2, model="ARD", node.states="marginal",state.recon="subsequently")
# Log likelihood test
log.lik.test.ER <- data.frame(fitcorER$states)
log.lik.test.ER$stat <- abs(log(log.lik.test.ER$X0)-log(log.lik.test.ER$X1))
log.lik.test.ER$test <- log.lik.test.ER$stat >= 2
log.lik.test.ER$test <- gsub(TRUE,"*",log.lik.test.ER$test)
log.lik.test.ER$test <- gsub(FALSE,"",log.lik.test.ER$test)
# Set the colors for each set of labels for plotting
cols <- lh_data$devel.color
cols <- setNames(cols, lh_data$taxon)
cols <- gsub("red","chocolate1",cols)
cols <- gsub("blue","darkslategray3",cols)
cols <- gsub("gray","gray48",cols)
colors <- c("chocolate1","darkslategray3")
# Reordering the vector with the tip colors to match the taxon order in the tree
colsmatch <- match(names(cols),tree$tip.label)
cols2 <- cols[order(colsmatch)]
# Phylogeny plot
setEPS()
postscript("ASR_ER_platyhelminth.eps")
plot.phylo(tree, label.offset=0.02, edge.width=2.5, cex=0.8)
tiplabels(pch=22, bg=cols2,cex=1.5)
nodelabels(pie=fitcorER$states,piecol=colors,cex=0.5)
nodelabels(log.lik.test.ER$test, col="purple", bg=NA,frame="none", adj=c(1.7,-0.1), cex=1.2)
dev.off()
# Save phylogeny with node labels that correspond to the scaled likelihood matrix
setEPS()
postscript("Tree_w_node_labels.eps")
plot.phylo(tree, label.offset=0.015)
nodelabels(frame="circle", cex=0.7)
dev.off()
# Scaled likelihood data set
scaled_likelihoods <- data.frame(fitcorER$states)
colnames(scaled_likelihoods) <- c("Indirect","Direct")
# Write the data set to a .csv file to be edited in excel
write.csv(scaled_likelihoods,"scaled_likelihoods.csv")
plot.phylo(tree, label.offset=0.02, edge.width=2.5, cex=0.8)
tiplabels(pch=22, bg=cols2,cex=1.5)
nodelabels(pie=fitcorER$states,piecol=colors,cex=0.5)
nodelabels(log.lik.test.ER$test, col="purple", bg=NA,frame="none", adj=c(1.7,-0.1), cex=1.2)
# Assign correct tree topology to the variable tree
tree <- read.tree("platyhelminths_relabeled.tre")
setwd("../platyhelminth_ASR/")
tree <- read.tree("platyhelminths_relabeled.tre")
########################################
# Ancestral state reconstruction
########################################
# Pull the data matrix of interest into R
lh_data <- read.csv("life_history_traits.csv",stringsAsFactors=FALSE)
lh_data2 <- data.frame(lh_data$taxon,lh_data$devel.code)
# corHMM runs
fitcorER <- rayDISC(tree, lh_data2, model="ER", node.states="marginal",state.recon="subsequently")
fitcorARD <- rayDISC(tree, lh_data2, model="ARD", node.states="marginal",state.recon="subsequently")
# Log likelihood test
log.lik.test.ER <- data.frame(fitcorER$states)
log.lik.test.ER$stat <- abs(log(log.lik.test.ER$X0)-log(log.lik.test.ER$X1))
log.lik.test.ER$test <- log.lik.test.ER$stat >= 2
log.lik.test.ER$test <- gsub(TRUE,"*",log.lik.test.ER$test)
log.lik.test.ER$test <- gsub(FALSE,"",log.lik.test.ER$test)
# Set the colors for each set of labels for plotting
cols <- lh_data$devel.color
cols <- setNames(cols, lh_data$taxon)
cols <- gsub("red","chocolate1",cols)
cols <- gsub("blue","darkslategray3",cols)
cols <- gsub("gray","gray48",cols)
colors <- c("chocolate1","darkslategray3")
# Reordering the vector with the tip colors to match the taxon order in the tree
colsmatch <- match(names(cols),tree$tip.label)
cols2 <- cols[order(colsmatch)]
# Phylogeny plot
setEPS()
postscript("ASR_ER_platyhelminth.eps")
plot.phylo(tree, label.offset=0.02, edge.width=2.5, cex=0.8)
tiplabels(pch=22, bg=cols2,cex=1.5)
nodelabels(pie=fitcorER$states,piecol=colors,cex=0.5)
nodelabels(log.lik.test.ER$test, col="purple", bg=NA,frame="none", adj=c(1.7,-0.1), cex=1.2)
dev.off()
# Save phylogeny with node labels that correspond to the scaled likelihood matrix
setEPS()
postscript("Tree_w_node_labels.eps")
plot.phylo(tree, label.offset=0.015)
nodelabels(frame="circle", cex=0.7)
dev.off()
# Scaled likelihood data set
scaled_likelihoods <- data.frame(fitcorER$states)
colnames(scaled_likelihoods) <- c("Indirect","Direct")
# Write the data set to a .csv file to be edited in excel
write.csv(scaled_likelihoods,"scaled_likelihoods.csv")
plot.phylo(tree, label.offset=0.02, edge.width=2.5, cex=0.8)
tiplabels(pch=22, bg=cols2,cex=1.5)
nodelabels(pie=fitcorER$states,piecol=colors,cex=0.5)
nodelabels(log.lik.test.ER$test, col="purple", bg=NA,frame="none", adj=c(1.7,-0.1), cex=1.2)
tiplabels(pch=22, bg=cols2,cex=1.5)
cols <- lh_data$devel.color
cols <- setNames(cols, lh_data$taxon)
cols <- gsub("red","chocolate1",cols)
cols <- gsub("blue","darkslategray3",cols)
cols <- gsub("grey","gray48",cols)
colors <- c("chocolate1","darkslategray3")
# Reordering the vector with the tip colors to match the taxon order in the tree
colsmatch <- match(names(cols),tree$tip.label)
cols2 <- cols[order(colsmatch)]
# Phylogeny plot
setEPS()
postscript("ASR_ER_platyhelminth.eps")
plot.phylo(tree, label.offset=0.02, edge.width=2.5, cex=0.8)
tiplabels(pch=22, bg=cols2,cex=1.5)
nodelabels(pie=fitcorER$states,piecol=colors,cex=0.5)
nodelabels(log.lik.test.ER$test, col="purple", bg=NA,frame="none", adj=c(1.7,-0.1), cex=1.2)
dev.off()
# Save phylogeny with node labels that correspond to the scaled likelihood matrix
setEPS()
postscript("Tree_w_node_labels.eps")
plot.phylo(tree, label.offset=0.015)
nodelabels(frame="circle", cex=0.7)
dev.off()
# Scaled likelihood data set
scaled_likelihoods <- data.frame(fitcorER$states)
colnames(scaled_likelihoods) <- c("Indirect","Direct")
# Write the data set to a .csv file to be edited in excel
write.csv(scaled_likelihoods,"scaled_likelihoods.csv")
plot.phylo(tree, label.offset=0.02, edge.width=2.5, cex=0.8)
tiplabels(pch=22, bg=cols2,cex=1.5)
nodelabels(pie=fitcorER$states,piecol=colors,cex=0.5)
nodelabels(log.lik.test.ER$test, col="purple", bg=NA,frame="none", adj=c(1.7,-0.1), cex=1.2)
